{"version":3,"sources":["components/CustomTextInput.js","components/CountrySelect.js","models/AutofillColors.js","components/ColorAutoCompleteField.js","models/Colors.js","components/ColorSelect.js","Styles.js","services/GetCountries.js","models/PhoneRegex.js","components/PhoneTextInput.js","views/CustomForm.js","views/SubmittedForm.js","App.js","reportWebVitals.js","index.js"],"names":["CustomTextInput","label","props","useField","field","meta","htmlFor","id","name","style","paddingBottom","className","touched","error","color","CountrySelect","formik","useFormikContext","useState","values","country","selectedCountry","setSelectedCountry","_","countries","flag","selectedFlag","setSelectedFlag","onChange","event","target","value","setCountryCode","countryCode","callingCodes","map","src","alt","AutofillColors","ColorAutoCompleteField","hintData","favoriteColor","text","setText","options","allowTabFill","e","onBlur","handleOnBlur","Colors","ColorSelect","selectedColor","setSelectedColor","onSelectColor","setColor","Styles","styled","div","a","fetch","response","json","data","GetCountries","PhoneRegExp","PhoneTextInput","display","flex","padding","width","CustomForm","state","loading","initialValues","firstName","middleName","lastName","phoneNumber","emailAddress","comments","initialValuesSet","newCountryCode","setState","this","setInitialValues","submittedValues","validationSchema","Yup","required","notRequired","matches","min","max","email","onSubmit","setSubmitting","resetForm","setTimeout","submitForm","submitValues","textAlign","href","height","type","placeholder","isSubmitting","React","Component","SubmittedForm","onClick","returnToEdit","App","submitted","setSubmitted","setSubmittedValues","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.584b16f3.chunk.js","sourcesContent":["import React from \"react\";\nimport { useField } from \"formik\";\n\nconst CustomTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name} style={{ paddingBottom: \"10px\" }}>\n        {label}\n      </label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport default CustomTextInput;\n","import React, { useState } from \"react\";\nimport * as _ from \"underscore\";\n\nimport { useField, useFormikContext } from \"formik\";\n\nconst CountrySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n\n  const [selectedCountry, setSelectedCountry] = useState(\n    formik.values.country !== \"\" ? formik.values.country : null\n  );\n  const [selectedFlag, setSelectedFlag] = useState(\n    formik.values.country !== \"\"\n      ? _.where(props.countries, { name: formik.values.country })[0].flag\n      : null\n  );\n\n  const onSelectCountry = (event) => {\n    if (event.target.value !== \"\") {\n      setSelectedCountry(event.target.value);\n      setSelectedFlag(\n        _.where(props.countries, { name: event.target.value })[0].flag\n      );\n      props.setCountryCode({\n        countryCode: _.where(props.countries, { name: event.target.value })[0]\n          .callingCodes,\n      });\n      formik.values.country = event.target.value;\n    }\n  };\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select\n        {...field}\n        {...props}\n        onChange={onSelectCountry}\n        value={selectedCountry}\n      >\n        <option value=\"\">Select Country</option>\n        {props.countries.map((country) => (\n          <option key={country.name} value={country.name}>\n            {country.name}\n          </option>\n        ))}\n      </select>\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n      {selectedFlag && <img src={selectedFlag} alt={selectedCountry} />}\n    </>\n  );\n};\n\nexport default CountrySelect;\n","const AutofillColors = [\n  \"White\",\n  \"Yellow\",\n  \"Blue\",\n  \"Red\",\n  \"Green\",\n  \"Black\",\n  \"Brown\",\n  \"Azure\",\n  \"Ivory\",\n  \"Teal\",\n  \"Silver\",\n  \"Purple\",\n  \"Navy blue\",\n  \"Pea green\",\n  \"Gray\",\n  \"Orange\",\n  \"Maroon\",\n  \"Charcoal\",\n  \"Aquamarine\",\n  \"Coral\",\n  \"Fuchsia\",\n  \"Wheat\",\n  \"Lime\",\n  \"Crimson\",\n  \"Khaki\",\n  \"Hot pink\",\n  \"Magenta\",\n  \"Olden\",\n  \"Plum\",\n  \"Olive\",\n  \"Cyan\",\n];\n\nexport default AutofillColors;\n","import React, { useState } from \"react\";\nimport { Hint } from \"react-autocomplete-hint\";\nimport { useFormikContext } from \"formik\";\nimport AutofillColors from \"../models/AutofillColors\";\n\nfunction ColorAutoCompleteField({ ...props }) {\n  const formik = useFormikContext();\n  const [hintData, setHintData] = useState(AutofillColors);\n  const [text, setText] = useState(\n    formik.values.favoriteColor === \"\" ? formik.values.favoriteColor : \"\"\n  );\n\n  const handleOnBlur = (e) => {\n    formik.values.favoriteColor = e.target.value;\n  };\n\n  return (\n    <div>\n      <Hint options={hintData} allowTabFill>\n        <input\n          className=\"input-with-hint\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onBlur={(e) => handleOnBlur(e)}\n        />\n      </Hint>\n    </div>\n  );\n}\n\nexport default ColorAutoCompleteField;\n","const Colors = [\n  \"Red\",\n  \"Orange\",\n  \"Yellow\",\n  \"Green\",\n  \"Blue\",\n  \"Purple\",\n  \"Pink\",\n  \"None\",\n  \"Other\",\n];\n\nexport default Colors;\n","import React, { useState } from \"react\";\nimport ColorAutoCompleteField from \"./ColorAutoCompleteField\";\nimport Colors from \"../models/Colors\";\n\nimport { useField, useFormikContext } from \"formik\";\n\nconst ColorSelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n\n  const [selectedColor, setSelectedColor] = useState(\n    formik.values.favoriteColor !== \"\" ? formik.values.favoriteColor : null\n  );\n\n  const onSelectColor = (event) => {\n    setSelectedColor(event.target.value);\n    if (event.target.value !== \"Other\") {\n      formik.values.favoriteColor = event.target.value;\n    }\n  };\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select\n        {...field}\n        {...props}\n        onChange={onSelectColor}\n        value={selectedColor}\n      >\n        <option>Select Color</option>\n        {Colors.map((color) => (\n          <option key={color} value={color}>\n            {color}\n          </option>\n        ))}\n      </select>\n      {selectedColor === \"Other\" && (\n        <ColorAutoCompleteField setColor={onSelectColor} />\n      )}\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport default ColorSelect;\n","import styled from \"styled-components\";\n\nexport const Styles = styled.div`\n    h1 {\n        text-align: center;\n        color: #777\n    }\n\n    h3 {\n        text-align: center;\n        color: #777\n    }\n\n    p {\n        text-align: center;\n    }\n\n    form {\n        display: flex;\n        flex-direction: column;\n        width: 25%;\n        margin: 100px auto;\n\n        label {\n            margin-top: 20px;\n        }\n\n        input, select {\n            font-size: 1.2em;\n        }\n\n        .error {\n            text-color: red;\n            font-size: .6em;\n        }\n    }\n\n    button {\n        background: #50104a;\n        padding 10px;\n        color: white;\n        margin-top: 20px;\n        border-radius: 5px;\n        font-size: 1.2em;\n    }\n\n    img {\n        width: 25%;\n        height: 25%;\n        padding-top: 10px;\n        align-self: center;\n    }\n`;\n","async function GetCountries() {\n  const url = \"https://restcountries.eu/rest/v2/all\";\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n}\n\nexport default GetCountries;\n","const PhoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport default PhoneRegExp;\n","import React from \"react\";\nimport { useField } from \"formik\";\n\nconst PhoneTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name} style={{ paddingBottom: \"10px\" }}>\n        {label}\n      </label>\n      <span style={{ display: \"flex\" }}>\n        {props.countryCode && (\n          <span style={{ flex: \"1\", padding: \"8px\" }}>\n            ({props.countryCode.countryCode})\n          </span>\n        )}\n        <span style={{ flex: \"1\", width: \"300px\" }}>\n          <input className=\"text-input\" {...field} {...props} />\n        </span>\n      </span>\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport default PhoneTextInput;\n","import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport CustomTextInput from \"../components/CustomTextInput\";\nimport CountrySelect from \"../components/CountrySelect\";\nimport ColorSelect from \"../components/ColorSelect\";\nimport { Styles } from \"../Styles\";\nimport GetCountries from \"../services/GetCountries\";\nimport PhoneRegExp from \"../models/PhoneRegex\";\nimport PhoneTextInput from \"../components/PhoneTextInput\";\n\nexport default class CustomForm extends React.Component {\n  state = {\n    loading: true,\n    countries: null,\n    countryCode: \"\",\n    initialValues: {\n      firstName: \"\",\n      middleName: \"\",\n      lastName: \"\",\n      country: \"\",\n      phoneNumber: \"\",\n      emailAddress: \"\",\n      favoriteColor: \"\",\n      comments: \"\",\n    },\n    initialValuesSet: false,\n  };\n\n  async componentDidMount() {\n    this.setState({ countries: await GetCountries() });\n    this.setInitialValues();\n  }\n\n  setCountryCode = (newCountryCode) => {\n    this.setState({ countryCode: newCountryCode });\n  };\n\n  setInitialValues() {\n    if (this.props.submittedValues) {\n      this.setState({\n        initialValues: {\n          firstName: this.props.submittedValues.firstName,\n          middleName: this.props.submittedValues.middleName\n            ? this.props.submittedValues.middleName\n            : \"\",\n          lastName: this.props.submittedValues.lastName,\n          country: this.props.submittedValues.country,\n          phoneNumber: this.props.submittedValues.phoneNumber,\n          emailAddress: this.props.submittedValues.emailAddress,\n          favoriteColor: this.props.submittedValues.favoriteColor,\n          comments: this.props.submittedValues.comments\n            ? this.props.submittedValues.comments\n            : \"\",\n        },\n      });\n    }\n    if (this.props.countryCode) {\n      this.setState({ countryCode: this.props.countryCode });\n    }\n    this.setState({ initialValuesSet: true });\n  }\n\n  render() {\n    return (\n      <Styles>\n        <div>\n          {this.state.countries && this.state.initialValuesSet && (\n            <Formik\n              initialValues={this.state.initialValues}\n              validationSchema={Yup.object({\n                firstName: Yup.string().required(\"First Name is required\"),\n                middleName: Yup.string().notRequired(),\n                lastName: Yup.string().required(\"Last Name is required\"),\n                country: Yup.string().required(\"Country is required\"),\n                phoneNumber: Yup.string()\n                  .matches(PhoneRegExp, \"Phone number is not valid\")\n                  .min(10, \"Phone Number must be 10 digits\")\n                  .max(10, \"Phone Number must be 10 digits\")\n                  .required(\"Phone Number is required\"),\n                emailAddress: Yup.string()\n                  .email(\"Invalid Email Address\")\n                  .required(\"Email Address is required\"),\n                favoriteColor: Yup.string().required(\n                  \"Favorite Color is required\"\n                ),\n                comments: Yup.string()\n                  .notRequired()\n                  .max(200, \"Comments must be 200 characters or less\"),\n              })}\n              onSubmit={(values, { setSubmitting, resetForm }) => {\n                setTimeout(() => {\n                  resetForm();\n                  setSubmitting(false);\n                }, 3000);\n                this.props.submitForm();\n                this.props.submitValues(values, this.state.countryCode);\n              }}\n            >\n              {(props) => (\n                <Form>\n                  <span style={{ textAlign: \"center\" }}>\n                    <a href=\"https://ally.com\">\n                      <img\n                        style={{ width: \"50%\", height: \"50%\" }}\n                        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/86/Ally_Bank_logo.svg/200px-Ally_Bank_logo.svg.png\"\n                      />\n                    </a>\n                  </span>\n                  <h1>Welcome to the Ally Front End Challenge Survey!</h1>\n                  <CustomTextInput\n                    label=\"First Name\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Middle Name\"\n                    name=\"middleName\"\n                    type=\"text\"\n                    placeholder=\"Middle Name\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                  />\n                  <br />\n                  <CountrySelect\n                    label=\"Country\"\n                    name=\"country\"\n                    countries={this.state.countries}\n                    setCountryCode={this.setCountryCode}\n                  />\n                  <br />\n                  <PhoneTextInput\n                    label=\"Phone Number\"\n                    name=\"phoneNumber\"\n                    type=\"text\"\n                    placeholder=\"\"\n                    countryCode={this.state.countryCode}\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Email Address\"\n                    name=\"emailAddress\"\n                    type=\"text\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <ColorSelect\n                    label=\"Favorite Color\"\n                    name=\"favoriteColor\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Comments\"\n                    name=\"comments\"\n                    type=\"text\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <button type=\"submit\">\n                    {props.isSubmitting ? \"Loading...\" : \"Submit\"}\n                  </button>\n                </Form>\n              )}\n            </Formik>\n          )}\n        </div>\n      </Styles>\n    );\n  }\n}\n","import React from \"react\";\nimport { Styles } from \"../Styles\";\n\nexport default class SubmittedForm extends React.Component {\n  render() {\n    return (\n      <Styles>\n        <div>\n          <h1>Thank you for taking the survey!</h1>\n          <h3>First Name</h3>\n          <p>{this.props.submittedValues.firstName}</p>\n          <h3>Middle Name</h3>\n          <p>{this.props.submittedValues.middleName}</p>\n          <h3>Last Name</h3>\n          <p>{this.props.submittedValues.lastName}</p>\n          <h3>Country</h3>\n          <p>{this.props.submittedValues.country}</p>\n          <h3>Phone Number</h3>\n          <p>\n            ({this.props.countryCode}){this.props.submittedValues.phoneNumber}\n          </p>\n          <h3>Email</h3>\n          <p>{this.props.submittedValues.email}</p>\n          <h3>Favorite Color</h3>\n          <p>{this.props.submittedValues.favoriteColor}</p>\n          <h3>Comments</h3>\n          <p>{this.props.submittedValues.comments}</p>\n          <br />\n          <div style={{ textAlign: \"center\" }}>\n            <h3>Something look wrong?</h3>\n            <button onClick={() => this.props.returnToEdit()}>\n              Edit Reponses\n            </button>\n          </div>\n        </div>\n      </Styles>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport CustomForm from \"./views/CustomForm\";\nimport SubmittedForm from \"./views/SubmittedForm\";\n\nexport default class App extends React.Component {\n  state = {\n    submitted: false,\n    submittedValues: null,\n    countryCode: null,\n  };\n\n  setSubmitted = () => {\n    this.setState({ submitted: true });\n  };\n\n  setSubmittedValues = (values, countryCode) => {\n    this.setState({ submittedValues: values });\n    this.setState({ countryCode: countryCode.countryCode });\n  };\n\n  setCountryCode = (value) => {\n    this.setState({ countryCode: value });\n  };\n\n  returnToEdit = () => {\n    this.setState({ submitted: false });\n  };\n\n  render() {\n    return (\n      <>\n        {!this.state.submitted && (\n          <CustomForm\n            submitForm={this.setSubmitted}\n            submitValues={this.setSubmittedValues}\n            submittedValues={this.state.submittedValues}\n            countryCode={this.state.countryCode}\n          />\n        )}\n        {this.state.submitted && this.state.submittedValues && (\n          <SubmittedForm\n            submittedValues={this.state.submittedValues}\n            countryCode={this.state.countryCode}\n            returnToEdit={this.returnToEdit}\n          />\n        )}\n      </>\n    );\n  }\n}\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}