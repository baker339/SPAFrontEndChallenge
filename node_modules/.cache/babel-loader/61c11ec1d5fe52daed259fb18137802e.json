{"ast":null,"code":"var _jsxFileName = \"/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/CountrySelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as _ from \"underscore\";\nimport CustomSelect from \"./CustomSelect\";\nimport { useField, useFormikContext } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CountrySelect = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [selectedFlag, setSelectedFlag] = useState(null);\n\n  const onSelectCountry = event => {\n    if (event.target.value != \"\") {\n      setSelectedCountry(event.target.value);\n      setSelectedFlag(_.where(props.countries, {\n        name: event.target.value\n      })[0].flag);\n      props.setCountryCode({\n        countryCode: _.where(props.countries, {\n          name: event.target.value\n        })[0].callingCodes\n      });\n      formik.values.country = event.target.value;\n      console.log(formik);\n      field.value = event.target.value;\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (formik.values.country != \"\") {\n        setSelectedCountry(formik.values.country);\n        setSelectedFlag(_.where(props.countries, {\n          name: formik.values.country\n        })[0].flag);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", { ...field,\n      ...props,\n      onChange: onSelectCountry,\n      value: selectedCountry,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Select Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), props.countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country.name,\n        children: country.name\n      }, country.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : null, selectedFlag && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: selectedFlag,\n      alt: selectedCountry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CountrySelect, \"Iph/lGrVmQSCFZAXrvrQ3FhBClI=\", false, function () {\n  return [useField, useFormikContext];\n});\n\n_c = CountrySelect;\nexport default CountrySelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountrySelect\");","map":{"version":3,"sources":["/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/CountrySelect.js"],"names":["React","useState","useEffect","_","CustomSelect","useField","useFormikContext","CountrySelect","label","props","field","meta","formik","selectedCountry","setSelectedCountry","selectedFlag","setSelectedFlag","onSelectCountry","event","target","value","where","countries","name","flag","setCountryCode","countryCode","callingCodes","values","country","console","log","id","map","touched","error","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as _ from \"underscore\";\nimport CustomSelect from \"./CustomSelect\";\n\nimport { useField, useFormikContext } from \"formik\";\n\nconst CountrySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [selectedFlag, setSelectedFlag] = useState(null);\n\n  const onSelectCountry = (event) => {\n    if (event.target.value != \"\") {\n      setSelectedCountry(event.target.value);\n      setSelectedFlag(\n        _.where(props.countries, { name: event.target.value })[0].flag\n      );\n      props.setCountryCode({\n        countryCode: _.where(props.countries, { name: event.target.value })[0]\n          .callingCodes,\n      });\n      formik.values.country = event.target.value;\n      console.log(formik);\n      field.value = event.target.value;\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (formik.values.country != \"\") {\n        setSelectedCountry(formik.values.country);\n        setSelectedFlag(\n          _.where(props.countries, { name: formik.values.country })[0].flag\n        );\n      }\n    };\n  }, []);\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select\n        {...field}\n        {...props}\n        onChange={onSelectCountry}\n        value={selectedCountry}\n      >\n        <option>Select Country</option>\n        {props.countries.map((country) => (\n          <option key={country.name} value={country.name}>\n            {country.name}\n          </option>\n        ))}\n      </select>\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n      {selectedFlag && <img src={selectedFlag} alt={selectedCountry} />}\n    </>\n  );\n};\n\nexport default CountrySelect;\n"]},"metadata":{},"sourceType":"module"}