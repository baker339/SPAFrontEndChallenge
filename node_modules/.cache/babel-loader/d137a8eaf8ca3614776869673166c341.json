{"ast":null,"code":"import _objectSpread from\"/Users/aidanbaker/Desktop/spa-frontend-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/aidanbaker/Desktop/spa-frontend-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/aidanbaker/Desktop/spa-frontend-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from\"react\";import*as _ from\"underscore\";import ColorAutoCompleteField from\"./ColorAutoCompleteField\";import Colors from\"../../../models/Colors\";import{useField,useFormikContext}from\"formik\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ColorSelect=function ColorSelect(_ref){var label=_ref.label,props=_objectWithoutProperties(_ref,[\"label\"]);var _useField=useField(props),_useField2=_slicedToArray(_useField,2),field=_useField2[0],meta=_useField2[1];var formik=useFormikContext();var _useState=useState(formik.values.favoriteColor!==\"\"?formik.values.favoriteColor:null),_useState2=_slicedToArray(_useState,2),selectedColor=_useState2[0],setSelectedColor=_useState2[1];var onSelectColor=function onSelectColor(event){setSelectedColor(event.target.value);if(event.target.value!==\"Other\"){formik.values.favoriteColor=event.target.value;}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:props.id||props.name,children:label}),/*#__PURE__*/_jsxs(\"select\",_objectSpread(_objectSpread(_objectSpread({},field),props),{},{onChange:onSelectColor,value:selectedColor,children:[/*#__PURE__*/_jsx(\"option\",{children:\"Select Color\"}),Colors.map(function(color){return/*#__PURE__*/_jsx(\"option\",{value:color,children:color},color);})]})),selectedColor===\"Other\"&&/*#__PURE__*/_jsx(ColorAutoCompleteField,{setColor:onSelectColor}),meta.touched&&meta.error?/*#__PURE__*/_jsx(\"div\",{style:{color:\"red\"},children:meta.error}):null]});};export default ColorSelect;","map":{"version":3,"sources":["/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/ColorSelect.js"],"names":["React","useState","_","ColorAutoCompleteField","Colors","useField","useFormikContext","ColorSelect","label","props","field","meta","formik","values","favoriteColor","selectedColor","setSelectedColor","onSelectColor","event","target","value","id","name","map","color","touched","error"],"mappings":"wgBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,YAAnB,CACA,MAAOC,CAAAA,sBAAP,KAAmC,0BAAnC,CACA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CAEA,OAASC,QAAT,CAAmBC,gBAAnB,KAA2C,QAA3C,C,6IAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAyB,IAAtBC,CAAAA,KAAsB,MAAtBA,KAAsB,CAAZC,KAAY,wDACrBJ,QAAQ,CAACI,KAAD,CADa,wCACpCC,KADoC,eAC7BC,IAD6B,eAE3C,GAAMC,CAAAA,MAAM,CAAGN,gBAAgB,EAA/B,CAF2C,cAIDL,QAAQ,CAChDW,MAAM,CAACC,MAAP,CAAcC,aAAd,GAAgC,EAAhC,CAAqCF,MAAM,CAACC,MAAP,CAAcC,aAAnD,CAAmE,IADnB,CAJP,wCAIpCC,aAJoC,eAIrBC,gBAJqB,eAQ3C,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,CAC/BF,gBAAgB,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CACA,GAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,GAAuB,OAA3B,CAAoC,CAClCR,MAAM,CAACC,MAAP,CAAcC,aAAd,CAA8BI,KAAK,CAACC,MAAN,CAAaC,KAA3C,CACD,CACF,CALD,CAOA,mBACE,wCACE,cAAO,OAAO,CAAEX,KAAK,CAACY,EAAN,EAAYZ,KAAK,CAACa,IAAlC,UAAyCd,KAAzC,EADF,cAEE,4DACME,KADN,EAEMD,KAFN,MAGE,QAAQ,CAAEQ,aAHZ,CAIE,KAAK,CAAEF,aAJT,wBAME,wCANF,CAOGX,MAAM,CAACmB,GAAP,CAAW,SAACC,KAAD,qBACV,eAAoB,KAAK,CAAEA,KAA3B,UACGA,KADH,EAAaA,KAAb,CADU,EAAX,CAPH,IAFF,CAeGT,aAAa,GAAK,OAAlB,eACC,KAAC,sBAAD,EAAwB,QAAQ,CAAEE,aAAlC,EAhBJ,CAkBGN,IAAI,CAACc,OAAL,EAAgBd,IAAI,CAACe,KAArB,cACC,YAAK,KAAK,CAAE,CAAEF,KAAK,CAAE,KAAT,CAAZ,UAA+Bb,IAAI,CAACe,KAApC,EADD,CAEG,IApBN,GADF,CAwBD,CAvCD,CAyCA,cAAenB,CAAAA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as _ from \"underscore\";\nimport ColorAutoCompleteField from \"./ColorAutoCompleteField\";\nimport Colors from \"../../../models/Colors\";\n\nimport { useField, useFormikContext } from \"formik\";\n\nconst ColorSelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n\n  const [selectedColor, setSelectedColor] = useState(\n    formik.values.favoriteColor !== \"\" ? formik.values.favoriteColor : null\n  );\n\n  const onSelectColor = (event) => {\n    setSelectedColor(event.target.value);\n    if (event.target.value !== \"Other\") {\n      formik.values.favoriteColor = event.target.value;\n    }\n  };\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select\n        {...field}\n        {...props}\n        onChange={onSelectColor}\n        value={selectedColor}\n      >\n        <option>Select Color</option>\n        {Colors.map((color) => (\n          <option key={color} value={color}>\n            {color}\n          </option>\n        ))}\n      </select>\n      {selectedColor === \"Other\" && (\n        <ColorAutoCompleteField setColor={onSelectColor} />\n      )}\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport default ColorSelect;\n"]},"metadata":{},"sourceType":"module"}