{"ast":null,"code":"var _jsxFileName = \"/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/ColorSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as _ from \"underscore\";\nimport ColorAutoCompleteField from \"./ColorAutoCompleteField\";\nimport Colors from \"../../Models/Colors\";\nimport { useField, useFormikContext } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ColorSelect = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n  const [selectedColor, setSelectedColor] = useState(formik.values.favoriteColor != \"\" ? formik.values.favoriteColor : null);\n\n  const onSelectColor = event => {\n    setSelectedColor(event.target.value);\n\n    if (event.target.value != \"Other\") {\n      formik.values.favoriteColor = event.target.value;\n    }\n  };\n\n  const colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\", \"Purple\", \"Pink\", \"None\", \"Other\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", { ...field,\n      ...props,\n      onChange: onSelectColor,\n      value: selectedColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Select Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), colors.map(color => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: color,\n        children: color\n      }, color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), selectedColor == \"Other\" && /*#__PURE__*/_jsxDEV(ColorAutoCompleteField, {\n      setColor: onSelectColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(ColorSelect, \"zISLshcmYTc6C9pLvD8uNJfkLmo=\", false, function () {\n  return [useField, useFormikContext];\n});\n\n_c = ColorSelect;\nexport default ColorSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorSelect\");","map":{"version":3,"sources":["/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/ColorSelect.js"],"names":["React","useState","_","ColorAutoCompleteField","Colors","useField","useFormikContext","ColorSelect","label","props","field","meta","formik","selectedColor","setSelectedColor","values","favoriteColor","onSelectColor","event","target","value","colors","id","name","map","color","touched","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,CAAZ,MAAmB,YAAnB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AAC3C,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBN,QAAQ,CAACI,KAAD,CAA9B;AACA,QAAMG,MAAM,GAAGN,gBAAgB,EAA/B;AAEA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAChDW,MAAM,CAACG,MAAP,CAAcC,aAAd,IAA+B,EAA/B,GAAoCJ,MAAM,CAACG,MAAP,CAAcC,aAAlD,GAAkE,IADlB,CAAlD;;AAIA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/BJ,IAAAA,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;;AACA,QAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,IAAsB,OAA1B,EAAmC;AACjCR,MAAAA,MAAM,CAACG,MAAP,CAAcC,aAAd,GAA8BE,KAAK,CAACC,MAAN,CAAaC,KAA3C;AACD;AACF,GALD;;AAOA,QAAMC,MAAM,GAAG,CACb,KADa,EAEb,QAFa,EAGb,QAHa,EAIb,OAJa,EAKb,MALa,EAMb,QANa,EAOb,MAPa,EAQb,MARa,EASb,OATa,CAAf;AAYA,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEZ,KAAK,CAACa,EAAN,IAAYb,KAAK,CAACc,IAAlC;AAAA,gBAAyCf;AAAzC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,uBACME,KADN;AAAA,SAEMD,KAFN;AAGE,MAAA,QAAQ,EAAEQ,aAHZ;AAIE,MAAA,KAAK,EAAEJ,aAJT;AAAA,8BAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOGQ,MAAM,CAACG,GAAP,CAAYC,KAAD,iBACV;AAAoB,QAAA,KAAK,EAAEA,KAA3B;AAAA,kBACGA;AADH,SAAaA,KAAb;AAAA;AAAA;AAAA;AAAA,cADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAeGZ,aAAa,IAAI,OAAjB,iBACC,QAAC,sBAAD;AAAwB,MAAA,QAAQ,EAAEI;AAAlC;AAAA;AAAA;AAAA;AAAA,YAhBJ,EAkBGN,IAAI,CAACe,OAAL,IAAgBf,IAAI,CAACgB,KAArB,gBACC;AAAK,MAAA,KAAK,EAAE;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA,gBAA+Bd,IAAI,CAACgB;AAApC;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IApBN;AAAA,kBADF;AAwBD,CAnDD;;GAAMpB,W;UACkBF,Q,EACPC,gB;;;KAFXC,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as _ from \"underscore\";\nimport ColorAutoCompleteField from \"./ColorAutoCompleteField\";\nimport Colors from \"../../Models/Colors\";\n\nimport { useField, useFormikContext } from \"formik\";\n\nconst ColorSelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const formik = useFormikContext();\n\n  const [selectedColor, setSelectedColor] = useState(\n    formik.values.favoriteColor != \"\" ? formik.values.favoriteColor : null\n  );\n\n  const onSelectColor = (event) => {\n    setSelectedColor(event.target.value);\n    if (event.target.value != \"Other\") {\n      formik.values.favoriteColor = event.target.value;\n    }\n  };\n\n  const colors = [\n    \"Red\",\n    \"Orange\",\n    \"Yellow\",\n    \"Green\",\n    \"Blue\",\n    \"Purple\",\n    \"Pink\",\n    \"None\",\n    \"Other\",\n  ];\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select\n        {...field}\n        {...props}\n        onChange={onSelectColor}\n        value={selectedColor}\n      >\n        <option>Select Color</option>\n        {colors.map((color) => (\n          <option key={color} value={color}>\n            {color}\n          </option>\n        ))}\n      </select>\n      {selectedColor == \"Other\" && (\n        <ColorAutoCompleteField setColor={onSelectColor} />\n      )}\n      {meta.touched && meta.error ? (\n        <div style={{ color: \"red\" }}>{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport default ColorSelect;\n"]},"metadata":{},"sourceType":"module"}