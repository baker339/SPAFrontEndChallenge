{"ast":null,"code":"var _jsxFileName = \"/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/CustomForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport CustomTextInput from \"./FormComponents/CustomTextInput\";\nimport CountrySelect from \"./FormComponents/CountrySelect\";\nimport ColorSelect from \"./FormComponents/ColorSelect\";\nimport { Styles } from \"../../Styles\";\nimport GetCountries from \"../../services/GetCountries\";\nimport PhoneRegExp from \"../../models/PhoneRegex\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CustomForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      countries: null,\n      countryCode: \"\",\n      initialValues: {\n        firstName: \"\",\n        middleName: \"\",\n        lastName: \"\",\n        country: \"\",\n        phoneNumber: \"\",\n        emailAddress: \"\",\n        favoriteColor: \"\",\n        comments: \"\"\n      },\n      initialValuesSet: false\n    };\n\n    this.setCountryCode = newCountryCode => {\n      this.setState({\n        countryCode: newCountryCode\n      });\n      console.log(newCountryCode);\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      countries: await GetCountries()\n    });\n    this.setInitialValues();\n  }\n\n  setInitialValues() {\n    if (this.props.submittedValues) {\n      this.setState({\n        initialValues: {\n          firstName: this.props.submittedValues.firstName,\n          middleName: this.props.submittedValues.middleName ? this.props.submittedValues.middleName : \"\",\n          lastName: this.props.submittedValues.lastName,\n          country: this.props.submittedValues.country,\n          phoneNumber: this.props.submittedValues.phoneNumber,\n          emailAddress: this.props.submittedValues.emailAddress,\n          favoriteColor: this.props.submittedValues.favoriteColor,\n          comments: this.props.submittedValues.comments ? this.props.submittedValues.comments : \"\"\n        }\n      });\n    }\n\n    this.setState({\n      initialValuesSet: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Styles, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.countries && this.state.initialValuesSet && /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: this.state.initialValues,\n          validationSchema: Yup.object({\n            firstName: Yup.string(),\n            //   .required(\"First Name is required\"),\n            middleName: Yup.string().notRequired(),\n            lastName: Yup.string(),\n            //   .required(\"Last Name is required\"),\n            country: Yup.string(),\n            //   .required(\"Country is required\"),\n            phoneNumber: Yup.string().matches(PhoneRegExp, \"Phone number is not valid\").required(\"Phone Number is required\").matches(this.state.countryCode, \"Must have correct country code\"),\n            emailAddress: Yup.string().email(\"Invalid Email Address\"),\n            //   .required(\"Email Address is required\"),\n            favoriteColor: Yup.string(),\n            //   .required(\"Favorite Color is required\"),\n            comments: Yup.string().notRequired().max(200, \"Comments must be 200 characters or less\")\n          }),\n          onSubmit: (values, {\n            setSubmitting,\n            resetForm\n          }) => {\n            setTimeout(() => {\n              resetForm();\n              setSubmitting(false);\n            }, 3000);\n            this.props.submitForm();\n            this.props.submitValues(values);\n          },\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Here's a Form!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n              label: \"First Name\",\n              name: \"firstName\",\n              type: \"text\",\n              placeholder: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n              label: \"Middle Name\",\n              name: \"middleName\",\n              type: \"text\",\n              placeholder: \"Middle Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n              label: \"Last Name\",\n              name: \"lastName\",\n              type: \"text\",\n              placeholder: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CountrySelect, {\n              label: \"Country\",\n              name: \"country\",\n              countries: this.state.countries,\n              setCountryCode: this.setCountryCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n              label: \"Phone Number\",\n              name: \"phoneNumber\",\n              type: \"text\",\n              placeholder: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n              label: \"Email Address\",\n              name: \"emailAddress\",\n              type: \"text\",\n              placeholder: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ColorSelect, {\n              label: \"Favorite Color\",\n              name: \"favoriteColor\",\n              placeholder: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n              label: \"Comments\",\n              name: \"comments\",\n              type: \"text\",\n              placeholder: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: props.isSubmitting ? \"Loading...\" : \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/CustomForm.js"],"names":["React","useEffect","useState","Formik","Form","Yup","CustomTextInput","CountrySelect","ColorSelect","Styles","GetCountries","PhoneRegExp","CustomForm","Component","constructor","props","state","loading","countries","countryCode","initialValues","firstName","middleName","lastName","country","phoneNumber","emailAddress","favoriteColor","comments","initialValuesSet","setCountryCode","newCountryCode","setState","console","log","componentDidMount","setInitialValues","submittedValues","render","object","string","notRequired","matches","required","email","max","values","setSubmitting","resetForm","setTimeout","submitForm","submitValues","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;AAEA,eAAe,MAAMC,UAAN,SAAyBZ,KAAK,CAACa,SAA/B,CAAyC;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAInBC,KAJmB,GAIX;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,WAAW,EAAE,EAHP;AAINC,MAAAA,aAAa,EAAE;AACbC,QAAAA,SAAS,EAAE,EADE;AAEbC,QAAAA,UAAU,EAAE,EAFC;AAGbC,QAAAA,QAAQ,EAAE,EAHG;AAIbC,QAAAA,OAAO,EAAE,EAJI;AAKbC,QAAAA,WAAW,EAAE,EALA;AAMbC,QAAAA,YAAY,EAAE,EAND;AAObC,QAAAA,aAAa,EAAE,EAPF;AAQbC,QAAAA,QAAQ,EAAE;AARG,OAJT;AAcNC,MAAAA,gBAAgB,EAAE;AAdZ,KAJW;;AAAA,SA0BnBC,cA1BmB,GA0BDC,cAAD,IAAoB;AACnC,WAAKC,QAAL,CAAc;AAAEb,QAAAA,WAAW,EAAEY;AAAf,OAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACD,KA7BkB;AAElB;;AAmBsB,QAAjBI,iBAAiB,GAAG;AACxB,SAAKH,QAAL,CAAc;AAAEd,MAAAA,SAAS,EAAE,MAAMR,YAAY;AAA/B,KAAd;AACA,SAAK0B,gBAAL;AACD;;AAODA,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKrB,KAAL,CAAWsB,eAAf,EAAgC;AAC9B,WAAKL,QAAL,CAAc;AACZZ,QAAAA,aAAa,EAAE;AACbC,UAAAA,SAAS,EAAE,KAAKN,KAAL,CAAWsB,eAAX,CAA2BhB,SADzB;AAEbC,UAAAA,UAAU,EAAE,KAAKP,KAAL,CAAWsB,eAAX,CAA2Bf,UAA3B,GACR,KAAKP,KAAL,CAAWsB,eAAX,CAA2Bf,UADnB,GAER,EAJS;AAKbC,UAAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWsB,eAAX,CAA2Bd,QALxB;AAMbC,UAAAA,OAAO,EAAE,KAAKT,KAAL,CAAWsB,eAAX,CAA2Bb,OANvB;AAObC,UAAAA,WAAW,EAAE,KAAKV,KAAL,CAAWsB,eAAX,CAA2BZ,WAP3B;AAQbC,UAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWsB,eAAX,CAA2BX,YAR5B;AASbC,UAAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWsB,eAAX,CAA2BV,aAT7B;AAUbC,UAAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWsB,eAAX,CAA2BT,QAA3B,GACN,KAAKb,KAAL,CAAWsB,eAAX,CAA2BT,QADrB,GAEN;AAZS;AADH,OAAd;AAgBD;;AACD,SAAKI,QAAL,CAAc;AAAEH,MAAAA,gBAAgB,EAAE;AAApB,KAAd;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAA,6BACE;AAAA,kBACG,KAAKtB,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWa,gBAAnC,iBACC,QAAC,MAAD;AACE,UAAA,aAAa,EAAE,KAAKb,KAAL,CAAWI,aAD5B;AAEE,UAAA,gBAAgB,EAAEf,GAAG,CAACkC,MAAJ,CAAW;AAC3BlB,YAAAA,SAAS,EAAEhB,GAAG,CAACmC,MAAJ,EADgB;AAE3B;AACAlB,YAAAA,UAAU,EAAEjB,GAAG,CAACmC,MAAJ,GAAaC,WAAb,EAHe;AAI3BlB,YAAAA,QAAQ,EAAElB,GAAG,CAACmC,MAAJ,EAJiB;AAK3B;AACAhB,YAAAA,OAAO,EAAEnB,GAAG,CAACmC,MAAJ,EANkB;AAO3B;AACAf,YAAAA,WAAW,EAAEpB,GAAG,CAACmC,MAAJ,GACVE,OADU,CACF/B,WADE,EACW,2BADX,EAEVgC,QAFU,CAED,0BAFC,EAGVD,OAHU,CAIT,KAAK1B,KAAL,CAAWG,WAJF,EAKT,gCALS,CARc;AAe3BO,YAAAA,YAAY,EAAErB,GAAG,CAACmC,MAAJ,GAAaI,KAAb,CAAmB,uBAAnB,CAfa;AAgB3B;AACAjB,YAAAA,aAAa,EAAEtB,GAAG,CAACmC,MAAJ,EAjBY;AAkB3B;AACAZ,YAAAA,QAAQ,EAAEvB,GAAG,CAACmC,MAAJ,GACPC,WADO,GAEPI,GAFO,CAEH,GAFG,EAEE,yCAFF;AAnBiB,WAAX,CAFpB;AAyBE,UAAA,QAAQ,EAAE,CAACC,MAAD,EAAS;AAAEC,YAAAA,aAAF;AAAiBC,YAAAA;AAAjB,WAAT,KAA0C;AAClDC,YAAAA,UAAU,CAAC,MAAM;AACfD,cAAAA,SAAS;AACTD,cAAAA,aAAa,CAAC,KAAD,CAAb;AACD,aAHS,EAGP,IAHO,CAAV;AAIA,iBAAKhC,KAAL,CAAWmC,UAAX;AACA,iBAAKnC,KAAL,CAAWoC,YAAX,CAAwBL,MAAxB;AACD,WAhCH;AAAA,oBAkCI/B,KAAD,iBACC,QAAC,IAAD;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,eAAD;AACE,cAAA,KAAK,EAAC,YADR;AAEE,cAAA,IAAI,EAAC,WAFP;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,oBAFF,eAQE;AAAA;AAAA;AAAA;AAAA,oBARF,eASE,QAAC,eAAD;AACE,cAAA,KAAK,EAAC,aADR;AAEE,cAAA,IAAI,EAAC,YAFP;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,oBATF,eAeE;AAAA;AAAA;AAAA;AAAA,oBAfF,eAgBE,QAAC,eAAD;AACE,cAAA,KAAK,EAAC,WADR;AAEE,cAAA,IAAI,EAAC,UAFP;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,oBAhBF,eAsBE;AAAA;AAAA;AAAA;AAAA,oBAtBF,eAuBE,QAAC,aAAD;AACE,cAAA,KAAK,EAAC,SADR;AAEE,cAAA,IAAI,EAAC,SAFP;AAGE,cAAA,SAAS,EAAE,KAAKC,KAAL,CAAWE,SAHxB;AAIE,cAAA,cAAc,EAAE,KAAKY;AAJvB;AAAA;AAAA;AAAA;AAAA,oBAvBF,eA6BE;AAAA;AAAA;AAAA;AAAA,oBA7BF,eA8BE,QAAC,eAAD;AACE,cAAA,KAAK,EAAC,cADR;AAEE,cAAA,IAAI,EAAC,aAFP;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,oBA9BF,eAoCE;AAAA;AAAA;AAAA;AAAA,oBApCF,eAqCE,QAAC,eAAD;AACE,cAAA,KAAK,EAAC,eADR;AAEE,cAAA,IAAI,EAAC,cAFP;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,oBArCF,eA2CE;AAAA;AAAA;AAAA;AAAA,oBA3CF,eA4CE,QAAC,WAAD;AACE,cAAA,KAAK,EAAC,gBADR;AAEE,cAAA,IAAI,EAAC,eAFP;AAGE,cAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,oBA5CF,eAiDE;AAAA;AAAA;AAAA;AAAA,oBAjDF,eAkDE,QAAC,eAAD;AACE,cAAA,KAAK,EAAC,UADR;AAEE,cAAA,IAAI,EAAC,UAFP;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,oBAlDF,eAwDE;AAAA;AAAA;AAAA;AAAA,oBAxDF,eAyDE;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAA,wBACGf,KAAK,CAACqC,YAAN,GAAqB,YAArB,GAAoC;AADvC;AAAA;AAAA;AAAA;AAAA,oBAzDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA0GD;;AAjKqD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport CustomTextInput from \"./FormComponents/CustomTextInput\";\nimport CountrySelect from \"./FormComponents/CountrySelect\";\nimport ColorSelect from \"./FormComponents/ColorSelect\";\nimport { Styles } from \"../../Styles\";\nimport GetCountries from \"../../services/GetCountries\";\nimport PhoneRegExp from \"../../models/PhoneRegex\";\n\nexport default class CustomForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    loading: true,\n    countries: null,\n    countryCode: \"\",\n    initialValues: {\n      firstName: \"\",\n      middleName: \"\",\n      lastName: \"\",\n      country: \"\",\n      phoneNumber: \"\",\n      emailAddress: \"\",\n      favoriteColor: \"\",\n      comments: \"\",\n    },\n    initialValuesSet: false,\n  };\n\n  async componentDidMount() {\n    this.setState({ countries: await GetCountries() });\n    this.setInitialValues();\n  }\n\n  setCountryCode = (newCountryCode) => {\n    this.setState({ countryCode: newCountryCode });\n    console.log(newCountryCode);\n  };\n\n  setInitialValues() {\n    if (this.props.submittedValues) {\n      this.setState({\n        initialValues: {\n          firstName: this.props.submittedValues.firstName,\n          middleName: this.props.submittedValues.middleName\n            ? this.props.submittedValues.middleName\n            : \"\",\n          lastName: this.props.submittedValues.lastName,\n          country: this.props.submittedValues.country,\n          phoneNumber: this.props.submittedValues.phoneNumber,\n          emailAddress: this.props.submittedValues.emailAddress,\n          favoriteColor: this.props.submittedValues.favoriteColor,\n          comments: this.props.submittedValues.comments\n            ? this.props.submittedValues.comments\n            : \"\",\n        },\n      });\n    }\n    this.setState({ initialValuesSet: true });\n  }\n\n  render() {\n    return (\n      <Styles>\n        <div>\n          {this.state.countries && this.state.initialValuesSet && (\n            <Formik\n              initialValues={this.state.initialValues}\n              validationSchema={Yup.object({\n                firstName: Yup.string(),\n                //   .required(\"First Name is required\"),\n                middleName: Yup.string().notRequired(),\n                lastName: Yup.string(),\n                //   .required(\"Last Name is required\"),\n                country: Yup.string(),\n                //   .required(\"Country is required\"),\n                phoneNumber: Yup.string()\n                  .matches(PhoneRegExp, \"Phone number is not valid\")\n                  .required(\"Phone Number is required\")\n                  .matches(\n                    this.state.countryCode,\n                    \"Must have correct country code\"\n                  ),\n                emailAddress: Yup.string().email(\"Invalid Email Address\"),\n                //   .required(\"Email Address is required\"),\n                favoriteColor: Yup.string(),\n                //   .required(\"Favorite Color is required\"),\n                comments: Yup.string()\n                  .notRequired()\n                  .max(200, \"Comments must be 200 characters or less\"),\n              })}\n              onSubmit={(values, { setSubmitting, resetForm }) => {\n                setTimeout(() => {\n                  resetForm();\n                  setSubmitting(false);\n                }, 3000);\n                this.props.submitForm();\n                this.props.submitValues(values);\n              }}\n            >\n              {(props) => (\n                <Form>\n                  <h1>Here's a Form!</h1>\n                  <CustomTextInput\n                    label=\"First Name\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Middle Name\"\n                    name=\"middleName\"\n                    type=\"text\"\n                    placeholder=\"Middle Name\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                  />\n                  <br />\n                  <CountrySelect\n                    label=\"Country\"\n                    name=\"country\"\n                    countries={this.state.countries}\n                    setCountryCode={this.setCountryCode}\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Phone Number\"\n                    name=\"phoneNumber\"\n                    type=\"text\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Email Address\"\n                    name=\"emailAddress\"\n                    type=\"text\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <ColorSelect\n                    label=\"Favorite Color\"\n                    name=\"favoriteColor\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <CustomTextInput\n                    label=\"Comments\"\n                    name=\"comments\"\n                    type=\"text\"\n                    placeholder=\"\"\n                  />\n                  <br />\n                  <button type=\"submit\">\n                    {props.isSubmitting ? \"Loading...\" : \"Submit\"}\n                  </button>\n                </Form>\n              )}\n            </Formik>\n          )}\n        </div>\n      </Styles>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}