{"ast":null,"code":"var _jsxFileName = \"/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/CountrySelect.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { setNestedObjectValues, useField } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CountrySelect = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const onSelectCountry = event => {\n    setSelectedCountry(event.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: this.selectedCountry,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Select Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), props.countries.map(country => /*#__PURE__*/_createElement(\"option\", { ...field,\n        key: country,\n        value: country.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }\n      }, country.name))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(CountrySelect, \"qDbTctTnxR0SGOarjZrxnpW7TVU=\", false, function () {\n  return [useField];\n});\n\n_c = CountrySelect;\nexport default CountrySelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountrySelect\");","map":{"version":3,"sources":["/Users/aidanbaker/Desktop/spa-frontend-challenge/src/components/Form/FormComponents/CountrySelect.js"],"names":["React","setNestedObjectValues","useField","CountrySelect","label","props","field","meta","selectedCountry","setSelectedCountry","useState","onSelectCountry","event","value","id","name","countries","map","country","touched","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,qBAAT,EAAgCC,QAAhC,QAAgD,QAAhD;;;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBL,QAAQ,CAACG,KAAD,CAA9B;AAEA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCC,QAAQ,CAAC,IAAD,CAAtD;;AAEA,QAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCH,IAAAA,kBAAkB,CAACG,KAAK,CAACC,KAAP,CAAlB;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAER,KAAK,CAACS,EAAN,IAAYT,KAAK,CAACU,IAAlC;AAAA,gBAAyCX;AAAzC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,KAAK,EAAE,KAAKI,eAApB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGH,KAAK,CAACW,SAAN,CAAgBC,GAAhB,CAAqBC,OAAD,iBACnB,8BAAYZ,KAAZ;AAAmB,QAAA,GAAG,EAAEY,OAAxB;AAAiC,QAAA,KAAK,EAAEA,OAAO,CAACH,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGG,OAAO,CAACH,IADX,CADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAUGR,IAAI,CAACY,OAAL,IAAgBZ,IAAI,CAACa,KAArB,gBAA6B;AAAA,gBAAMb,IAAI,CAACa;AAAX;AAAA;AAAA;AAAA;AAAA,YAA7B,GAAuD,IAV1D;AAAA,kBADF;AAcD,CAvBD;;GAAMjB,a;UACkBD,Q;;;KADlBC,a;AAyBN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\n\nimport { setNestedObjectValues, useField } from \"formik\";\n\nconst CountrySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const onSelectCountry = (event) => {\n    setSelectedCountry(event.value);\n  };\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select value={this.selectedCountry}>\n        <option>Select Country</option>\n        {props.countries.map((country) => (\n          <option {...field} key={country} value={country.name}>\n            {country.name}\n          </option>\n        ))}\n      </select>\n      {meta.touched && meta.error ? <div>{meta.error}</div> : null}\n    </>\n  );\n};\n\nexport default CountrySelect;\n"]},"metadata":{},"sourceType":"module"}